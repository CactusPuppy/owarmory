// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client"
  output          = "../src/generated/prisma"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hero {
  name String @id
  role String

  builds StadiumBuild[]
  items  Item[]
  powers Power[]
}

model User {
  id            String         @id @default(nanoid(10))
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  builds        StadiumBuild[]
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model StadiumBuild {
  id              String      @id @default(nanoid(12))
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  author          User        @relation(fields: [authorId], references: [id])
  buildTitle      String
  description     String?
  roundInfos      RoundInfo[]
  additionalNotes String?
  hero            Hero        @relation(fields: [heroName], references: [name])
  tags            Tag[]       @relation("BuildTags")

  authorId String
  heroName String

  @@index([authorId])
}

model RoundInfo {
  id          String             @id @default(cuid(2))
  parentBuild StadiumBuild       @relation(fields: [buildId], references: [id])
  buildId     String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  orderIndex  Int                @default(0)
  sections    RoundInfoSection[]
  note        String?
}

model RoundInfoSection {
  id              String    @id @default(cuid(2))
  title           String? // When title is missing, that is the standard section for the round
  parentRoundInfo RoundInfo @relation(fields: [parentRoundInfoId], references: [id])
  orderIndex      Int       @default(0)
  power           Power?    @relation(fields: [powerId], references: [id])
  purchasedItems  Item[]    @relation("ItemPurchases")
  soldItems       Item[]    @relation("ItemSales")

  parentRoundInfoId String
  powerId           String?
}

model Item {
  id          String    @id @default(cuid(2))
  name        String
  category    String
  rarity      String    @default("Common")
  description String?
  cost        Int
  statMods    StatMod[]
  hero        Hero?     @relation(fields: [heroName], references: [name])
  iconURL     String?
  removed     Boolean  @default(false)

  purchaseSections RoundInfoSection[] @relation("ItemPurchases")
  soldSections     RoundInfoSection[] @relation("ItemSales")
  heroName         String?
}

model Power {
  id          String  @id @default(cuid(2))
  name        String
  description String
  iconURL     String?
  hero        Hero    @relation(fields: [heroName], references: [name])
  heroName    String
  removed     Boolean @default(false)

  roundInfos RoundInfoSection[]
}

model Stat {
  id          Int       @id @default(autoincrement())
  statType    String    @default("Preset")
  name        String    @unique
  description String?
  iconURL     String?
  statMods    StatMod[]
}

model StatMod {
  id                     String  @id @default(cuid(2))
  orderIndex             Int     @default(0)
  stat                   Stat    @relation(fields: [statId], references: [id])
  amount                 Int
  isPercentage           Boolean @default(false)
  isShownPostDescription Boolean @default(false)
  hidden      Boolean   @default(false)

  Item   Item[]
  statId Int
}

model Tag {
  id     Int    @id @default(autoincrement())
  label  String @unique

  builds StadiumBuild[] @relation("BuildTags")
}
